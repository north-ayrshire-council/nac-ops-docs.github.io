{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to NAC OPs Docs \u2693\ufe0e A really simple update Commands \u2693\ufe0e mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u2693\ufe0e mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to NAC OPs Docs"},{"location":"#welcome-to-nac-ops-docs","text":"A really simple update","title":"Welcome to NAC OPs Docs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Contribute/","text":"Note Just test MD content to test POC - cheers Ross Contributing and Collaborating \u2693\ufe0e This document is a set of guidelines for contributing and collaborating using Git and Gitlab. These are proposed guidelines, not rules. This guide is designed to make it easy for us all to collaborate together consistently and it is up for wider discussion. Script/Code Development \u2693\ufe0e NAC OPs going forward will use Git as our version control system . We will develop new features, update scripts, fix bugs in separate Git branches, raise Merge Requests , assign them to a repo owner for review, and the owner will merge to main only after they are happy with the proposed update. We do not commit directly to the main branch. Useful Git basics: Getting Started Git basics for Git beginners Commits \u2693\ufe0e Please use detailed explanatory text in commit messages: If it is related to a Samanage Service Request or Incident, please include the case number; If it fixes a bug, please state this and the bug it fixes; If it is a new feature, briefly describe the new feature. A good commit message will help the whole team, so please make it clear and meaningful. Branches \u2693\ufe0e There are a few ways to crack this nut and people can get passionate about each method, this post covers them at a high level . My vote would go for the Github Flow model. Merge Requests \u2693\ufe0e If you are new to creating Merge Requests, click here for an easy-to-follow guide. If you are still working on your merge request and are not yet ready for it to be reviewed and merged, then please start the title with WIP: to prevent a Work-In-Progress merge request from being merged before it is ready. The Assignee should be one of the repo owners, which should be clearly outlined in the repo README. If you no longer require your branch after a merge to main (and you probably don't) please select the option to Delete source branch when merge request is accepted ; this keeps the repo branches nice and tidy. Merge Requests should strive to tackle one issue/feature and commits within this should try to \"tell a story\", making reviewing easier and faster. TBC \u2693\ufe0e Notifications \u2693\ufe0e Repos should have notifications enabled via webhooks or email to ensure teams have visibilty on the progress/modifications of projects. Considerations when using notifications 1. Only useful notifications (Keep noise to a minimum) 2. Send to relevant channel(s) 3. ..... add as required","title":"Contribute"},{"location":"Contribute/#contributing-and-collaborating","text":"This document is a set of guidelines for contributing and collaborating using Git and Gitlab. These are proposed guidelines, not rules. This guide is designed to make it easy for us all to collaborate together consistently and it is up for wider discussion.","title":"Contributing and Collaborating"},{"location":"Contribute/#scriptcode-development","text":"NAC OPs going forward will use Git as our version control system . We will develop new features, update scripts, fix bugs in separate Git branches, raise Merge Requests , assign them to a repo owner for review, and the owner will merge to main only after they are happy with the proposed update. We do not commit directly to the main branch. Useful Git basics: Getting Started Git basics for Git beginners","title":"Script/Code Development"},{"location":"Contribute/#commits","text":"Please use detailed explanatory text in commit messages: If it is related to a Samanage Service Request or Incident, please include the case number; If it fixes a bug, please state this and the bug it fixes; If it is a new feature, briefly describe the new feature. A good commit message will help the whole team, so please make it clear and meaningful.","title":"Commits"},{"location":"Contribute/#branches","text":"There are a few ways to crack this nut and people can get passionate about each method, this post covers them at a high level . My vote would go for the Github Flow model.","title":"Branches"},{"location":"Contribute/#merge-requests","text":"If you are new to creating Merge Requests, click here for an easy-to-follow guide. If you are still working on your merge request and are not yet ready for it to be reviewed and merged, then please start the title with WIP: to prevent a Work-In-Progress merge request from being merged before it is ready. The Assignee should be one of the repo owners, which should be clearly outlined in the repo README. If you no longer require your branch after a merge to main (and you probably don't) please select the option to Delete source branch when merge request is accepted ; this keeps the repo branches nice and tidy. Merge Requests should strive to tackle one issue/feature and commits within this should try to \"tell a story\", making reviewing easier and faster.","title":"Merge Requests"},{"location":"Contribute/#tbc","text":"","title":"TBC"},{"location":"Contribute/#notifications","text":"Repos should have notifications enabled via webhooks or email to ensure teams have visibilty on the progress/modifications of projects. Considerations when using notifications 1. Only useful notifications (Keep noise to a minimum) 2. Send to relevant channel(s) 3. ..... add as required","title":"Notifications"}]}